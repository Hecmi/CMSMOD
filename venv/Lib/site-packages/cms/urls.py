from django.conf import settings
from django.urls import include, re_path, path
from cms import views
from cms.apphook_pool import apphook_pool
from cms.appresolver import get_app_patterns
from cms.constants import SLUG_REGEXP

if settings.APPEND_SLASH:
    regexp = r'^(?P<slug>%s)/$' % SLUG_REGEXP
else:
    regexp = r'^(?P<slug>%s)$' % SLUG_REGEXP

if apphook_pool.get_apphooks():
    # If there are some application urls, use special resolver,
    # so we will have standard reverse support.
    urlpatterns = get_app_patterns()
else:
    urlpatterns = []


urlpatterns.extend([
    re_path(r'^cms_login/$', views.login, name='cms_login'),
    re_path(r'^cms_wizard/', include('cms.wizards.urls')),
    re_path(regexp, views.details, name='pages-details-by-slug'),
    re_path(r'^$', views.details, {'slug': ''}, name='pages-root'),
    re_path(r"descargar/(?P<url>.*)", views.descargar_html, name='descargar'),
    re_path(r"registro/(?P<url>)", views.user_registration, name='registration'),
    re_path(r"manual/(?P<url>)", views.ver_guia_usuario, name='manual'),
    re_path(r"actividades/(?P<url>)", views.generar_actividad_grupo_aleatorio, name='actividades'),
    re_path(r"save/(?P<url>)", views.insert_groups, name='save'),
    re_path(r"save_dynamic/(?P<url>)", views.generar_grupo_dinamico, name='save_dynamic'),
    re_path(r"get_groups/(?P<url>)", views.get_groups, name='get_groups'),
    re_path(r"update_groups/(?P<url>)", views.update_groups, name='update_groups'),
    re_path(r"generate_group_base/(?P<url>)", views.generar_grupo_random_base, name='generate_group_base')
    
])
