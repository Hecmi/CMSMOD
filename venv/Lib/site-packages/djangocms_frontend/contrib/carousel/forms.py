from django import forms
from django.db.models.fields.related import ManyToOneRel
from django.utils.translation import gettext_lazy as _
from entangled.forms import EntangledModelForm
from filer.fields.image import AdminImageFormField, FilerImageField
from filer.models import Image

from djangocms_frontend.fields import (
    AttributesFormField,
    ButtonGroup,
    TagTypeFormField,
    TemplateChoiceMixin,
)

from ... import settings
from ...common.background import BackgroundFormMixin
from ...fields import HTMLFormField
from ...helpers import first_choice
from ...models import FrontendUIItem
from .. import carousel
from ..link.forms import AbstractLinkForm
from .constants import (
    CAROUSEL_ASPECT_RATIO_CHOICES,
    CAROUSEL_PAUSE_CHOICES,
    CAROUSEL_TEMPLATE_CHOICES,
    CAROUSEL_TRANSITION_CHOICES,
)

mixin_factory = settings.get_forms(carousel)


class CarouselForm(mixin_factory("Carousel"), TemplateChoiceMixin, EntangledModelForm):
    """
    Components > "Carousel" Plugin
    https://getbootstrap.com/docs/5.0/components/carousel/
    """

    class Meta:
        model = FrontendUIItem
        entangled_fields = {
            "config": [
                "template",
                "carousel_aspect_ratio",
                "carousel_controls",
                "carousel_indicators",
                "carousel_interval",
                "carousel_keyboard",
                "carousel_pause",
                "carousel_ride",
                "carousel_wrap",
                "carousel_transition",
                "attributes",
            ]
        }
        untangled_fields = ("tag_type",)

    template = forms.ChoiceField(
        label=_("Plantilla"),
        choices=CAROUSEL_TEMPLATE_CHOICES,
        initial=first_choice(CAROUSEL_TEMPLATE_CHOICES),        
    )
    carousel_interval = forms.IntegerField(
        label=_("Intervalo"),
        initial=5000,
        help_text=_(
            "El tiempo cíclico que lleva recorrer el contenido de las imágenes."
        ),
    )
    carousel_controls = forms.BooleanField(
        label=_("Controles"),
        initial=True,
        required=False,
        help_text=_("Agrega controles en el siguiente y previo elemento."),
    )
    carousel_indicators = forms.BooleanField(
        label=_("Indicadores"),
        initial=True,
        required=False,
        help_text=_("Agre indicadores al carrusel."),
    )
    carousel_keyboard = forms.BooleanField(
        label=_("Evento de teclado"),
        initial=True,
        required=False,
        help_text=_("Eventos de teclado que determina como debe comportarse el carrusel."),
    )
    carousel_pause = forms.ChoiceField(
        label=_("Pausa"),
        choices=CAROUSEL_PAUSE_CHOICES,
        initial=first_choice(CAROUSEL_PAUSE_CHOICES),        
        widget=ButtonGroup(attrs=dict(property="text")),
    )
    carousel_ride = forms.BooleanField(
        label=_("Auto inicio"),
        initial=True,
        required=False,
        help_text=_(
            "Ejecuta automáticamente el carrusel apenas se inicie la aplicación"
        ),
    )
    carousel_wrap = forms.BooleanField(
        label=_("Ajuste"),
        initial=True,
        required=False,
        help_text=_(
            "Si desea que el ajuste que la ejecución continua del carrusel se de o tenga un fin."
        ),
    )
    carousel_aspect_ratio = forms.ChoiceField(
        label=_("Radio de crecimiento"),
        choices=settings.EMPTY_CHOICE + CAROUSEL_ASPECT_RATIO_CHOICES,
        required=False,
        initial=settings.EMPTY_CHOICE[0][0],
        help_text=_(
            "Determina la altura y ancho del carrusel y su tamaño invariante."
        ),
    )
    carousel_transition = forms.ChoiceField(
        label=_("Transición"),
        choices=CAROUSEL_TRANSITION_CHOICES,
        required=False,
        initial=CAROUSEL_TRANSITION_CHOICES[0][0],
        help_text=_("Determines if slides change by sliding or fading."),
        widget=ButtonGroup(attrs=dict(property="text")),
    )
    attributes = AttributesFormField(
        excluded_keys=[
            "id",
            "data-bs-interval",
            "data-bs-keyboard",
            "data-bs-pause",
            "data-bs-ride",
            "data-bs-wrap",
        ],
    )
    tag_type = TagTypeFormField()


class CarouselSlideForm(
    mixin_factory("CarouselSlide"),
    AbstractLinkForm,
    BackgroundFormMixin,
    EntangledModelForm,
):
    """
    Components > "Slide" Plugin
    https://getbootstrap.com/docs/5.0/components/carousel/
    """

    class Meta:
        model = FrontendUIItem
        entangled_fields = {
            "config": [
                "carousel_image",
                "carousel_content",
                "attributes",
            ]
        }
        untangled_fields = ("tag_type",)

    link_is_optional = True

    carousel_image = AdminImageFormField(
        rel=ManyToOneRel(FilerImageField, Image, "id"),
        queryset=Image.objects.all(),
        to_field_name="id",
        label=_("Imágen de elemento"),
        required=False,
    )
    carousel_content = HTMLFormField(
        label=_("Contenido"),
        required=False,
        initial="",
        help_text=_("Contenido que será agregado al carrusel."),
    )
    attributes = AttributesFormField()
    tag_type = TagTypeFormField()
